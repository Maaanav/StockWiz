{"ast":null,"code":"var _jsxFileName = \"/Users/manavmangela/Desktop/TSEC/Resume-Manav/ProjectsForInterview/MyProject/stockmarketproject/frontend/src/pages/ChatBot.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [error, setError] = useState(null);\n  const userId = \"user123\"; // Example user ID (You can replace this with actual auth)\n\n  const sendMessage = async () => {\n    if (!message) return;\n    const newChat = [...chat, {\n      user: \"You\",\n      text: message\n    }];\n    setChat(newChat);\n    setMessage(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5001/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          message\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to get a response from the chatbot\");\n      const data = await response.json();\n      setChat([...newChat, {\n        user: \"Bot\",\n        text: data.response\n      }]);\n\n      // If user asks about a stock, fetch and display stock insights\n      if (message.toLowerCase().includes(\"stock\")) {\n        const stockSymbol = message.split(\" \").pop().toUpperCase();\n        const stockResponse = await fetch(`http://localhost:5001/api/stock/${stockSymbol}`);\n        const stockData = await stockResponse.json();\n        if (stockData.trend) {\n          setChat([...newChat, {\n            user: \"Bot\",\n            text: `ðŸ“Š ${stockData.name} (${stockData.symbol})\\nPrice: $${stockData.price}\\n${stockData.trend}`\n          }]);\n        }\n      }\n    } catch (err) {\n      setError(\"Chatbot is currently unavailable. Please try again later.\");\n      console.error(\"Chatbot error:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Agentic AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.user, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 53\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 38\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Ask something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"cxkjmMEkgWOj13BakyEQRP35PNs=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ChatBot","_s","message","setMessage","chat","setChat","error","setError","userId","sendMessage","newChat","user","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","toLowerCase","includes","stockSymbol","split","pop","toUpperCase","stockResponse","stockData","trend","name","symbol","price","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","style","color","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/manavmangela/Desktop/TSEC/Resume-Manav/ProjectsForInterview/MyProject/stockmarketproject/frontend/src/pages/ChatBot.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst ChatBot = () => {\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [error, setError] = useState(null);\n  const userId = \"user123\"; // Example user ID (You can replace this with actual auth)\n\n  const sendMessage = async () => {\n    if (!message) return;\n\n    const newChat = [...chat, { user: \"You\", text: message }];\n    setChat(newChat);\n    setMessage(\"\");\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId, message }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to get a response from the chatbot\");\n\n      const data = await response.json();\n      setChat([...newChat, { user: \"Bot\", text: data.response }]);\n\n      // If user asks about a stock, fetch and display stock insights\n      if (message.toLowerCase().includes(\"stock\")) {\n        const stockSymbol = message.split(\" \").pop().toUpperCase();\n        const stockResponse = await fetch(`http://localhost:5001/api/stock/${stockSymbol}`);\n        const stockData = await stockResponse.json();\n\n        if (stockData.trend) {\n          setChat([...newChat, { user: \"Bot\", text: `ðŸ“Š ${stockData.name} (${stockData.symbol})\\nPrice: $${stockData.price}\\n${stockData.trend}` }]);\n        }\n      }\n    } catch (err) {\n      setError(\"Chatbot is currently unavailable. Please try again later.\");\n      console.error(\"Chatbot error:\", err);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Agentic AI Chatbot</h1>\n      <div>{chat.map((msg, index) => <p key={index}><strong>{msg.user}:</strong> {msg.text}</p>)}</div>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Ask something...\" />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}